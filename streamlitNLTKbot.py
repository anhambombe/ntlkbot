import streamlit as st
from fuzzywuzzy import fuzz
from datetime import time
import time

about_text = """
**Tudo por amor**

Bem-vindo ao nosso aplicativo! 
Estamos empolgados por voc√™ estar aqui e fique a vontade para saber um pouco de n√≥s.

**Miss√£o e Objetivo**

Nosso aplicativo foi desenvolvido com o objetivo de fornecer a voc√™ uma experi√™ncia √∫nica e √∫til. 
Nossa miss√£o √© *escrever a nossa hist√≥ria* e *compartilhar opini√µes*. 
Queremos que voc√™ aproveite ao m√°ximo nossa plataforma e encontre valor em nossos recursos.

...

"""

menu_items = {
    "About": about_text,
    "Report a bug": "mailto:anhambombee@gmail.com",  # Use o formato correto para um link de e-mail
    "Get help": "mailto:leilanhime97@gmail.com"  # Adicione uma entrada para a p√°gina "About" em portugu√™s
}# "https://streamlit.io/community"

# Configure a p√°gina
st.set_page_config(
    page_title="mozango",
    page_icon="üíñ",
    layout="wide",
    menu_items=menu_items # Use a lista de itens de menu corretamente definida
)

  
# Fun√ß√£o para ler e pr√©-processar os dados do arquivo
def ler_dados_arquivo(arquivo):
    with open(arquivo, "r", encoding="latin-1") as file:
        linhas = file.readlines()
    pares_de_dialogo = [linha.strip().split("/") for linha in linhas]
    return pares_de_dialogo

# Fun√ß√£o para encontrar a pergunta mais semelhante no arquivo de treinamento
def encontrar_pergunta_similar(user_input, pares_de_dialogo):
    max_similarity = 0
    resposta = None

    for pergunta, resp in pares_de_dialogo:
        similarity = fuzz.ratio(user_input.lower(), pergunta.lower())
        if similarity > max_similarity:
            max_similarity = similarity
            resposta = resp

    return resposta

# T√≠tulo do chatbot
st.title("LaloveüíùAnlovi")

# Introdu√ß√£o
st.markdown("**Ol√°! Estou aqui para ajudar. Pergunte-me qualquer coisa sobre voc√™s!**")

# Campo de entrada de texto para a pergunta do usu√°rio
user_input = st.text_input("Voc√™: ")

# Op√ß√£o para carregar dados de treinamento de um arquivo
treinar_com_arquivo = st.checkbox("Treinar com Dados de Arquivo")

# Bot√£o para enviar a pergunta
if st.button("Enviar"):
    user_input = user_input.strip()  # Remova espa√ßos em branco em excesso
    response = None

    # Se a op√ß√£o de treinamento com arquivo estiver marcada
    if treinar_com_arquivo:
        # Leia e pr√©-processe os dados do arquivo
        pares_de_dialogo = ler_dados_arquivo("ME1.txt")

        # Simula um atraso para mostrar que o chatbot est√° pensando
        with st.spinner("Pensando..."):
            time.sleep(2)  # Simulando 2 segundos de pensamento

            response = encontrar_pergunta_similar(user_input, pares_de_dialogo)

        st.success("Processamento conclu√≠do!")

        if response:
            st.write("Resposta do Chatbot:")
            st.write(response)
        else:
            st.write("""Pergunta n√£o encontrada no arquivo. 
            Eu fui limitado a dar respostas que est√£o no arquivo do meu treinamento para previnir respostas indesejadas.
            Ainda estou no incicio da minha aprendizagem, tenha paci√™ncia comigo, pois tudo √© novo para mim... mas garanto-lhe
            que vou me empenhar para saber mais e poder satisfazer as suas necesidades, dentro do possivel, √© claro. Seu eu der uma
            resposta errada, me perdoe, estou tentando entender esse mundo cheio de maravilhas e inc√¥gnitas.
            """)
    else:
        # Resposta padr√£o se a op√ß√£o de treinamento com arquivo n√£o estiver marcada
        st.markdown("**Op√ß√£o *Treinar com Dados de Arquivo* n√£o marcada. Por favor, marque a op√ß√£o e tente novamente.**")

# Nota sobre o chatbot
st.info("Este √© um chatbot treinado com base na correspond√™ncia de dados de **Anlovi** e **Lalovi**.")
